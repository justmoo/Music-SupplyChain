pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/PublisherRole.sol";
import "../coffeeaccesscontrol//RetailerRole.sol";
import "../coffeeaccesscontrol/SingerRole.sol";
import "../coffeecore/Ownable.sol";

contract SupplyChain is Ownable,SingerRole,RetailerRole,PublisherRole,ConsumerRole {

  // Define 'owner'
  address  _owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
    mapping  (uint => Item)  items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Written,  // 0
    Recorded,  // 1
    AddedToAlbum, // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Written;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Singer, goes on the package, can be verified by the Consumer
    address  ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address  originSingerID; // Metamask-Ethereum address of the Singer
    string  originSingerName; // Singer Name
    string  originSingerInformation;  // Singer Information
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address   publisherID;  // Metamask-Ethereum address of the publisher
    address  retailerID; // Metamask-Ethereum address of the Retailer
    address  consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Written(uint upc);
  event Recorded(uint upc);
  event AddedToAlbum(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == _owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc)  {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].publisherID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Written
  modifier written(uint _upc) {
    require(items[_upc].itemState == State.Written);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier recorded(uint _upc) {
    require(items[_upc].itemState == State.Recorded);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier addedToAlbum(uint _upc) {
    require(items[_upc].itemState == State.AddedToAlbum);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale);

    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
   require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
      require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
  require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
     require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    _owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == _owner) {
      selfdestruct( _owner);
    }
  }

  // Define a function 'WriteItem' that allows a Singer to mark an item 'Written'
  function writeItem(uint _upc, address  _originSingerID, string   _originSingerName, string  _originSingerInformation, string  _productNotes) public 
  {

    
    Item memory Song = Item ({
      sku :sku,
      upc:_upc,
      ownerID: msg.sender,
      originSingerID:_originSingerID,
      originSingerName:_originSingerName,
      originSingerInformation:_originSingerInformation,
      productNotes:_productNotes,
      itemState:State.Written,
      publisherID:msg.sender,
      retailerID:msg.sender,
      consumerID:msg.sender,
      productID: sku + _upc,
      productPrice:0

    });

      items[_upc] = Song;
    
   
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Written(_upc);
  }

  // Define a function 'recordItem' that allows a Singer to mark an item 'recorded'
  function recordItem(uint _upc) public  
  // Call modifier to check if upc has passed previous supply chain stage
      written(_upc)
  // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
  {
    // Update the appropriate fields
    
    items[_upc].itemState = State.Recorded;
    // Emit the appropriate event
    emit Recorded(_upc);
  }

  // Define a function 'packItem' that allows a Singer to mark an item 'Packed'
  function addToAlbum(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
    recorded(_upc)
  // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
  {
    // Update the appropriate fields
   
    items[_upc].itemState = State.AddedToAlbum;
    
    // Emit the appropriate event
    emit AddedToAlbum(_upc);
  }

  // Define a function 'sellItem' that allows a Singer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
    addedToAlbum(_upc)
  // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
  {
    // Update the appropriate fields
    
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;

    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the publisher to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc) 
    
    {
    // Update the appropriate fields - ownerID, distributorID, itemState
      items[_upc].itemState = State.Sold;
      items[_upc].ownerID = msg.sender;
      items[_upc].publisherID = msg.sender;
    // Transfer money to Singer
      items[_upc].originSingerID.transfer(items[_upc].productPrice);
    // emit the appropriate event
      emit Sold(_upc);
  }

  //Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  //Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
      sold(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer() 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.Received;
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    // Emit the appropriate event
    emit Received(_upc);
    
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer()
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].itemState = State.Purchased;
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;

    // Emit the appropriate event
    emit Purchased(_upc);
  }

  //Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originSingerID,
  string  originSingerName, // ?
  string   originSingerInformation // ?
  
  ) 
  {
  // Assign values to the 8 parameters
  
    Item memory Song = items[_upc];
  return 
  (
  itemSKU=Song.sku,//0
  itemUPC=Song.upc,//1
  ownerID=Song.ownerID,//2
  originSingerID=Song.originSingerID,//3
  originSingerName=Song.originSingerName,//4
  originSingerInformation=Song.originSingerInformation//5
  
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string    productNotes, 
  uint    productPrice,
  State   itemState,
  address publisherID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
      Item memory Song = items[_upc];

    
  return 
  (
  itemSKU = Song.sku,//0
  itemUPC = Song.upc,//1
  productID = Song.productID,//2
  productNotes = Song.productNotes,//3
  productPrice = Song.productPrice,//4
  itemState = Song.itemState,//5
  publisherID = Song.publisherID,//6
  retailerID = Song.retailerID,//7
  consumerID = Song.consumerID//8
  );
  }
 }
